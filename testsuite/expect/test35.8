#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test creation of duplicate persistent burst buffers
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2015-2019 SchedMD LLC.
# Written by Morris Jette <jette(at)schedmd.com>
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "35.8"
set exit_code   0
set output_mk1  "test$test_id.mk1.output"
set output_mk2  "test$test_id.mk2.output"
set output_rm1  "test$test_id.rm1.output"
set output_rm2  "test$test_id.rm2.output"
set output_show "test$test_id.show.output"
set output_use  "test$test_id.use.output"
set script_mk1  "test$test_id.mk1.bash"
set script_mk2  "test$test_id.mk2.bash"
set script_rm1  "test$test_id.rm1.bash"
set script_rm2  "test$test_id.rm2.bash"
set script_show "test$test_id.show.bash"
set script_use  "test$test_id.use.bash"

proc find_bb_name { fname bb_name log_out } {
	global bin_cat

	log_user $log_out
	set found 0
	spawn $bin_cat $fname
	expect {
		-re "JobID=$bb_name " {
			incr found
			exp_continue
		}
		-re "Name=$bb_name " {
			incr found
			exp_continue
		}
		eof {
			wait
		}
	}
	log_user 1
	return $found
}

print_header $test_id

set bb_types [get_bb_types]
if {[string first "cray" $bb_types] == -1} {
	send_user "\nWARNING: This test can only be run with the burst_buffer/cray plugin\n"
	exit 0
}
if {[get_bb_persistent] == 0} {
	send_user "\nWARNING: This test can only be run if persistent burst_buffers can be created/deleted\n"
	exit 0
}

make_bash_script $script_mk1 "
#DW create_persistent name=test_a$test_id capacity=1GiB access_mode=striped type=scratch
$scontrol show burst"

make_bash_script $script_mk2 "
#DW create_persistent name=test_a$test_id capacity=1GiB access_mode=striped type=scratch
#DW create_persistent name=test_b$test_id capacity=1GiB access_mode=striped type=scratch
#DW jobdw type=scratch capacity=1GiB access_mode=striped,private type=scratch
$scontrol show burst"

make_bash_script $script_rm1 "
#DW destroy_persistent name=test_a$test_id
$scontrol show burst"

make_bash_script $script_rm2 "
#DW destroy_persistent name=test_a$test_id
#DW destroy_persistent name=test_b$test_id
$scontrol show burst"

make_bash_script $script_show "
$scontrol show burst"

make_bash_script $script_use "
#DW persistentdw name=test_a$test_id
#DW jobdw type=scratch capacity=1GiB access_mode=striped,private type=scratch
$scontrol show burst"

#
# Destroy any vestigial buffers
#
send_user "\n\nDestroy vestigial persistent burst buffer\n"
exec $bin_rm -f $output_mk1 $output_mk2 $output_rm1 $output_rm2 $output_show $output_use
incr max_job_state_delay 300
set job_id 0
spawn $sbatch -t1 -N1 --output=$output_rm2 $script_rm2
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: job did not launch\n"
	set exit_code 1
}
if {[wait_for_job $job_id "DONE"] != 0} {
	send_user "\nFAILURE: job did not complete\n"
	set exit_code 1
	cancel_job $job_id
} elseif {[find_bb_name $output_rm2 test_a$test_id 1] != 0} {
	send_user "\nFAILURE: job burst buffer not removed\n"
	set exit_code 1
} elseif {[find_bb_name $output_rm2 test_b$test_id 1] != 0} {
	send_user "\nFAILURE: job burst buffer not removed\n"
	set exit_code 1
}
exec $bin_rm -f $output_rm2

#
# Now submit a job to use the persistent burst buffer followed by a job
# to create the burst buffer, make sure the buffer creation happens first
#
send_user "\n\nCreate and use a persistent burst buffer\n"
set job_id_use 0
spawn $sbatch -t1 -N1 --output=$output_use $script_use
expect {
	-re "Submitted batch job ($number)" {
		set job_id_use $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

set job_id_mk 0
spawn $sbatch -t1 -N1 --output=$output_mk1 $script_mk1
expect {
	-re "Submitted batch job ($number)" {
		set job_id_mk $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$job_id_mk == 0} {
	send_user "\nFAILURE: job did not launch\n"
	set exit_code 1
} elseif {[wait_for_job $job_id_mk "DONE"] != 0} {
	send_user "\nFAILURE: job did not complete\n"
	set exit_code 1
	cancel_job $job_id_mk
}

if {$job_id_use == 0} {
	send_user "\nFAILURE: job did not launch\n"
	set exit_code 1
} elseif {[wait_for_job $job_id_use "DONE"] != 0} {
	send_user "\nFAILURE: job did not complete\n"
	set exit_code 1
	cancel_job $job_id_use
} elseif {[wait_for_file $output_use] != 0} {
	set exit_code 1
} elseif {[find_bb_name $output_use test_a$test_id 1] != 1} {
	send_user "\nFAILURE: job using burst buffer ran before creation\n"
	set exit_code 1
} elseif {[find_bb_name $output_use $job_id_use 1] != 1} {
	send_user "\nFAILURE: job burst buffer not found\n"
	set exit_code 1
} elseif {[wait_for_file $output_mk1] != 0} {
	set exit_code 1
} elseif {[find_bb_name $output_mk1 test_a$test_id 1] != 1} {
	send_user "\nFAILURE: job creating burst buffer failed to do so\n"
	set exit_code 1
} elseif {[find_bb_name $output_mk1 test_b$test_id 0] != 0} {
	send_user "\nFAILURE: job creating burst buffer failed to do so\n"
	set exit_code 1
}

#
# Now submit a job with duplicate persistent burst buffer creation request
# plus a job burst buffer
#
send_user "\n\nCreate persistent burst buffers, including duplicate\n"
set job_id_mk 0
spawn $sbatch -t1 -N1 --output=$output_mk2 $script_mk2
expect {
	-re "Submitted batch job ($number)" {
		set job_id_mk $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$job_id_mk == 0} {
	send_user "\nFAILURE: job did not launch\n"
	set exit_code 1
} elseif {[wait_for_job $job_id_mk "DONE"] != 0} {
	send_user "\nFAILURE: job did not complete\n"
	set exit_code 1
	cancel_job $job_id_mk
} elseif {[wait_for_file $output_mk2] != 0} {
	set exit_code 1
} elseif {[find_bb_name $output_mk2 test_a$test_id 1] != 1} {
	send_user "\nFAILURE: job creating burst buffer failed to do so\n"
	set exit_code 1
} elseif {[find_bb_name $output_mk2 test_b$test_id 0] != 1} {
	send_user "\nFAILURE: job creating burst buffer failed to do so\n"
	set exit_code 1
} elseif {[find_bb_name $output_mk2 $job_id_mk 0] != 1} {
	send_user "\nFAILURE: job burst buffer not found\n"
	set exit_code 1
}

#
# Now destroy the burst buffers
# The first job requests one buffer destroy, but that does not happen until the
# job ends. The second job requests both buffers get destroyed. The third job
# verifies buffer destruction.
#
#
send_user "\n\nDestroy one persistent burst buffer\n"
set job_id_rm 0
spawn $sbatch -t1 -N1 --output=$output_rm1 $script_rm1
expect {
	-re "Submitted batch job ($number)" {
		set job_id_rm $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id_rm == 0} {
	send_user "\nFAILURE: job did not launch\n"
	set exit_code 1
} elseif {[wait_for_job $job_id_rm "DONE"] != 0} {
	send_user "\nFAILURE: job did not complete\n"
	set exit_code 1
	cancel_job $job_id_rm
} elseif {[wait_for_file $output_rm1] != 0} {
	set exit_code 1
} elseif {[find_bb_name $output_rm1 test_a$test_id 1] != 1} {
	send_user "\nFAILURE: burst buffer unexpected removed\n"
	set exit_code 1
} elseif {[find_bb_name $output_rm1 test_b$test_id 0] != 1} {
	send_user "\nFAILURE: burst buffer unexpected removed\n"
	set exit_code 1
}

send_user "\n\nDestroy both persistent burst buffers (one already gone)\n"
set job_id_rm 0
spawn $sbatch -t1 -N1 --output=$output_rm2 $script_rm2
expect {
	-re "Submitted batch job ($number)" {
		set job_id_rm $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id_rm == 0} {
	send_user "\nFAILURE: job did not launch\n"
	set exit_code 1
} elseif {[wait_for_job $job_id_rm "DONE"] != 0} {
	send_user "\nFAILURE: job did not complete\n"
	set exit_code 1
	cancel_job $job_id_rm
} elseif {[wait_for_file $output_rm2] != 0} {
	set exit_code 1
} elseif {[find_bb_name $output_rm2 test_a$test_id 1] != 0} {
	send_user "\nFAILURE: job deleting burst buffer failed to do so\n"
	set exit_code 1
} elseif {[find_bb_name $output_rm2 test_b$test_id 0] != 1} {
	send_user "\nFAILURE: burst buffer unexpected removed\n"
	set exit_code 1
}

send_user "\n\nCheck that both persistent burst buffers have been destroyed\n"
set job_id_rm 0
spawn $sbatch -t1 -N1 --output=$output_show $script_show
expect {
	-re "Submitted batch job ($number)" {
		set job_id_rm $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id_rm == 0} {
	send_user "\nFAILURE: job did not launch\n"
	set exit_code 1
} elseif {[wait_for_job $job_id_rm "DONE"] != 0} {
	send_user "\nFAILURE: job did not complete\n"
	set exit_code 1
	cancel_job $job_id_rm
} elseif {[wait_for_file $output_show] != 0} {
	set exit_code 1
} elseif {[find_bb_name $output_show test_a$test_id 1] != 0} {
	send_user "\nFAILURE: job deleting burst buffer failed to do so\n"
	set exit_code 1
} elseif {[find_bb_name $output_show test_b$test_id 0] != 0} {
	send_user "\nFAILURE: job deleting burst buffer failed to do so\n"
	set exit_code 1
}

if {$exit_code == 0} {
	exec $bin_rm -f $output_mk1 $output_mk2 $output_rm1 $output_rm2 $output_show $output_use
	exec $bin_rm -f $script_mk1 $script_mk2 $script_rm1 $script_rm2 $script_show $script_use
	send_user "\nSUCCESS\n"
}
exit $exit_code
